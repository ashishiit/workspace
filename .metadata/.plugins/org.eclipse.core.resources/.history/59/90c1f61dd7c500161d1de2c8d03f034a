'''
Created on Oct 27, 2016

@author: s528358
'''
# from nntplib import first
class Link:
    def __init__(self, item):        
        self.next = None
        self.data = item
class UnOrdered:
    def __init__(self):
        self.first = None
        self.last = None
    def InsertFirst(self,item):
        NewLink = Link(item)
        if self.first is None:
            self.last = NewLink
        else:
            NewLink.next = self.first
        self.first = NewLink
    def Display(self):
        current = self.first
        while current is not None:
            print(current.data)
            current = current.next
    def InsertLast(self,item):
        NewLink = Link(item)
        if self.last is None:
            self.first = NewLink
        else:
            self.last.next = NewLink
        self.last = NewLink
    def Size(self):
        count = 0
        current = self.first
        while current is not None:
            count = count + 1
            current = current.next
        return count
    def Search(self,item):
        current = self.first
        while current is not None:
            if current.data == item:
                return current
            else:
                current = current.next
    def MiddleOfLinkedList(self):
        current1 = self.first
        current2 = self.first.next.next
        while current2.next is not None:
            current1 = current1.next
            current2 = current2.next
        return current1.data
    def NthNode(self, N):
        count = 0
        current = self.first
        while count < N-1:
            current = current.next
            count = count + 1
        return current.data
            
    def NthFromEnd(self, N):
        count = 0
        current = self.first
        while current is not None:
            count = count + 1
            current = current.next
        temp = count - N
        current = self.first
        for i in range(temp):
            current = current.next
        return current.data
                
        
    def Remove(self,item):
        previous = None
        current = self.first
#         previous = current
        while current is not None:
            if current.data == item:
                break
            else:
                previous = current
                current = current.next
#             if current is None:
#                 return None
            
        if previous is None:
            self.first = current.next
        else:
            previous.next = current.next
        return current
        
l = UnOrdered()
l.InsertFirst(10)
l.InsertFirst(20)
l.InsertFirst(30)
l.InsertLast(300)
l.InsertLast(200)
l.Display()
# print('number of nodes = %d'%l.Size())
# s = l.Search(3000)
# if s is None:
#     print('item not found')
# else:
#     print('FOUND')
# r = l.Remove(200)
# if r is None:
#     print('item not Found')
# else:
#     print('item deleted')
#     l.Display()
print('middle of linked list = %d'%l.MiddleOfLinkedList())
print('Nth node = %d'%l.NthNode(2))